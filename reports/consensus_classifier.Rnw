
\pagebreak
\chapter{Consensus Classifier}

<<setup3, include=FALSE, cache=FALSE>>=
# Set options
knitr::opts_chunk$set(include=TRUE, results="hide", fig.width=8, fig.height=8, fig.path='figures/', fig.align='center', fig.show='hold',warning=FALSE, echo=FALSE, message=FALSE, error=FALSE, cache=TRUE)
options(replace.assign=TRUE,width=90)
rm(list=ls())
days.per.month <- 30.4368
days.per.year <- 365.242
library(ggplot2)
library(gridExtra)
library(Biobase)
library(randomForest)
library(survcomp)
library(RColorBrewer)
library(dplyr)
library(reshape2)
library(grid)
library(ROCR)
library(GGally)

library(consensusOV)
#source("~/repos/consensusOV/get.konecny.subtypes.R")
#source("~/repos/consensusOV/get.verhaak.subtypes.R")
#source("~/repos/consensusOV/get.helland.subtypes.R")
#source("~/repos/consensusOV/get.bentink.subtypes.R")
#source("~/repos/consensusOV/get.consensus.subtypes.R")
#source("~/repos/consensusOV/get.subtypes.R")

load("Filtered_intersection_pooled.subtypes.RData")
load("intersection_pooled.subtypes.RData")

#source("/Users/greg/Desktop/mar7_ovcsubtypes/OvcSubtypes/reports/getGenePairConsensusOvarianSubtypes.R")
@

<<Leave_one_dataset_out>>=
set.seed(400)
## This file is produced from classificationAcrossDatasets.Rnw
load("esets.not.rescaled.classified.RData")

dataset.names <- names(esets.not.rescaled.classified)

classification.vals.genepairs.rf <- list()
classification.vals.genepairs.rf.prob <- list()

# Store values that have NAs for patients that are not classified due to default margin cutoffs
classification.vals.genepairs.default.cutoff.rf <- list()
classification.vals.genepairs.default.cutoff.rf.prob <- list()

sample_ids <- list()

if(file.exists("classification.vals.genepairs.rf.RData")) {
  load("classification.vals.genepairs.rf.RData")
  load("classification.vals.genepairs.rf.prob.RData")
  load("classification.vals.genepairs.default.cutoff.rf.RData")
  load("classification.vals.genepairs.default.cutoff.prob.rf.RData")
} else {
  for(dataset.name in dataset.names) {
    # left.out.dataset <- esets.with.survival.scaled[[dataset.name]]
    left.out.dataset <- esets.not.rescaled.classified[[dataset.name]]
    training.dataset.names <- dataset.names[dataset.names != dataset.name]
    
    print(paste("Classifying eset", dataset.name))
    consensus.classifier.output.genepairs.rf <- get.subtypes(left.out.dataset, method="consensusOV",.dataset.names.to.keep = training.dataset.names, remove.using.cutoff = FALSE)
    
    classification.vals.genepairs.rf[[dataset.name]] <- consensus.classifier.output.genepairs.rf$consensusOV.subtypes
    classification.vals.genepairs.rf.prob[[dataset.name]] <- consensus.classifier.output.genepairs.rf$rf.probs
    
    classification.vals.genepairs.default.cutoff.rf[[dataset.name]] <- consensus.classifier.output.genepairs.rf$consensusOV.subtypes
    classification.vals.genepairs.default.cutoff.rf.prob[[dataset.name]] <- consensus.classifier.output.genepairs.rf$rf.probs
    
    current.margins <- rowMax(consensus.classifier.output.genepairs.rf$rf.probs) - apply(consensus.classifier.output.genepairs.rf$rf.probs, 1, function(row) sort(row)[3])
    
    classification.vals.genepairs.default.cutoff.rf[[dataset.name]][ecdf(current.margins)(current.margins) < 0.75] <- NA
    classification.vals.genepairs.default.cutoff.rf.prob[[dataset.name]][ecdf(current.margins)(current.margins) < 0.75] <- NA
  }
  
  save(classification.vals.genepairs.rf,
       file = "classification.vals.genepairs.rf.RData"
       )
  
  save(classification.vals.genepairs.rf.prob,
       file = "classification.vals.genepairs.rf.prob.RData"
       )
  
  save(classification.vals.genepairs.default.cutoff.rf,
       file = "classification.vals.genepairs.default.cutoff.rf.RData"
       )
  
  save(classification.vals.genepairs.default.cutoff.rf.prob,
       file = "classification.vals.genepairs.default.cutoff.prob.rf.RData"
       )
}

@


\pagebreak

<<get_pooled_subtypes_df>>=
subtype.names <- c("Konecny", "Verhaak", "Helland", "Bentink")
esets.not.rescaled.classified.names <- names(esets.not.rescaled.classified)
esets.not.rescaled.classified <-lapply(esets.not.rescaled.classified.names, function(eset.name) {
  esets.not.rescaled.classified[[eset.name]]$data.source <- eset.name
  return(esets.not.rescaled.classified[[eset.name]])
  })
names(esets.not.rescaled.classified) <- esets.not.rescaled.classified.names
pooled.subtypes <- do.call(rbind, 
    lapply(esets.not.rescaled.classified, function(eset) pData(eset)[,c("days_to_death", "vital_status", "data.source", paste0(subtype.names, ".subtypes"), paste0(c("Konecny", "Verhaak", "Helland"), ".margins"))]        
           ))

colnames(pooled.subtypes)[4:7] <- sub(".subtypes", "", colnames(pooled.subtypes)[4:7])

#pooled.subtypes$Konecny <- factor(pooled.subtypes$Konecny, levels(pooled.subtypes$Konecny)[c(1,2,3,4)])
#pooled.subtypes$Verhaak <- factor(pooled.subtypes$Verhaak, levels(pooled.subtypes$Verhaak)[c(2,1,4,3)])
#pooled.subtypes$Helland <- factor(pooled.subtypes$Helland, levels(pooled.subtypes$Helland)[c(2,3,4,1)])
#pooled.subtypes$Bentink <- factor(pooled.subtypes$Bentink, levels(pooled.subtypes$Bentink)[c(2,1)])

subtype.correspondances <- data.frame(Konecny=c("C1_immL", "C2_diffL", "C3_profL", "C4_mescL"),
                                      Verhaak=c("IMR", "DIF", "PRO", "MES"),
                                      Helland=c("C2", "C4", "C5", "C1"))



pooled.subtypes$concordant <- match(pooled.subtypes$Konecny, subtype.correspondances$Konecny) ==
  match(pooled.subtypes$Verhaak, subtype.correspondances$Verhaak) &
  match(pooled.subtypes$Verhaak, subtype.correspondances$Verhaak) ==
  match(pooled.subtypes$Helland, subtype.correspondances$Helland)

pooled.subtypes$Consensus.genepairs.rf <- unlist(classification.vals.genepairs.rf)
pooled.subtypes$Consensus.genepairs.rf.margin <- unlist(lapply(classification.vals.genepairs.rf.prob, function(rf.probs) apply(rf.probs, 1, function(x) max(x) - sort(x)[3]))) 
pooled.subtypes$Consensus.genepairs.rf.maxprob <- unlist(lapply(classification.vals.genepairs.rf.prob, function(rf.probs) apply(rf.probs, 1, max))) 

pooled.subtypes$Consensus.genepairs.default.cutoff.rf <- unlist(classification.vals.genepairs.default.cutoff.rf)
pooled.subtypes$Consensus.genepairs.default.cutoff.rf.margin <- unlist(lapply(classification.vals.genepairs.default.cutoff.rf.prob, function(rf.probs) apply(rf.probs, 1, function(x) max(x) - sort(x)[3]))) 
pooled.subtypes$Consensus.genepairs.default.cutoff.rf.maxprob <- unlist(lapply(classification.vals.genepairs.default.cutoff.rf.prob, function(rf.probs) apply(rf.probs, 1, max))) 

# reorder factor levels. Note, this should be done in the original function
pooled.subtypes$Consensus.genepairs.rf <- factor(pooled.subtypes$Consensus.genepairs.rf, levels(pooled.subtypes$Consensus.genepairs.rf))
pooled.subtypes$Consensus.genepairs.default.cutoff.rf <- factor(pooled.subtypes$Consensus.genepairs.default.cutoff.rf, levels(pooled.subtypes$Consensus.genepairs.default.cutoff.rf))

pooled.subtypes$years_to_death = pooled.subtypes$days_to_death / days.per.year
pooled.subtypes$days_to_death <- NULL

  # Censor to ten years
censor.time.out <- survcomp::censor.time(surv.time = pooled.subtypes$years_to_death, surv.event = pooled.subtypes$vital_status, time.cens = 10)
pooled.subtypes$years_to_death <- censor.time.out$surv.time.cens
pooled.subtypes$vital_status <- censor.time.out$surv.event.cens

# only keep cases with survival data
pooled.subtypes <- pooled.subtypes[!is.na(pooled.subtypes$years_to_death) & !is.na(pooled.subtypes$vital_status),]

pooled.subtypes$vital_status <- pooled.subtypes$vital_status == "deceased"

pooled.subtypes$data.source <- factor(pooled.subtypes$data.source)

save(pooled.subtypes, file = "pooled.subtypes.updated.RData")
@

\section{Consensus Classifier: Description}

We sought to develop a subtype classifier that represents the consensus of published HGS ovarian cancer subtype classifiers. We designed this classifier to be trained on multiple datasets, applicable across platforms, and able to produce a real-valued confidence score that can discriminate between patients that are of well-defined or intermediate subtypes. 

We present a consensus subtype classifier based on binary gene pairs. This classifier was designed to be appropriate for classifying expression profiles in small (e.g. single-sample) independent datasets, and does not require rescaling of gene expression values. This classifier is trained on patients that were concordantly classified by the Helland, Verhaak, and Konecny classifiers across our ovarian cancer data compendium. This classifier uses a binarized gene pairs across platforms to classify patients in independent datasets; it outputs the subtype classification, in addition to a real-valued margin score which can discriminate between patients that are of well-defined or intermediate subtypes. A higher margin score can be interpreted as greater certainty of classification. Our leave-one-dataset-out validation results in Figure \ref{fig:roccurves} indicate that the real-valued score from this consensus classifier is effective at discriminating between patients of well-defined or intermediate subtypes.

\section{Consensus Classifier: Concordance}

\begin{figure}[H]
<<genepair_contingency_plots, fig.width=10, fig.height=11, out.width="0.7\\textwidth">>=

contingency.plots <- lapply(c("Helland", "Verhaak", "Konecny", "Concordant_Classification"), function(comparison.group) {
  if(comparison.group == "Helland") {
    contingency.m <- melt(table(pooled.subtypes$Consensus.genepairs.rf, pooled.subtypes$Helland))
    contingency.matrix <- as.matrix(table(pooled.subtypes$Consensus.genepairs.rf, pooled.subtypes$Helland))
  } else if(comparison.group == "Verhaak") {
    contingency.m <- melt(table(pooled.subtypes$Consensus.genepairs.rf, pooled.subtypes$Verhaak))
    contingency.matrix <- as.matrix(table(pooled.subtypes$Consensus.genepairs.rf, pooled.subtypes$Verhaak))
  } else if(comparison.group == "Konecny") {
    contingency.m <- melt(table(pooled.subtypes$Consensus.genepairs.rf, pooled.subtypes$Konecny))
    contingency.matrix <- as.matrix(table(pooled.subtypes$Consensus.genepairs.rf, pooled.subtypes$Konecny))
  } else if(comparison.group == "Concordant_Classification") {
    contingency.m <- melt(table(pooled.subtypes$Consensus.genepairs.rf[pooled.subtypes$concordant], pooled.subtypes$Verhaak[pooled.subtypes$concordant]))
    contingency.matrix <- as.matrix(table(pooled.subtypes$Consensus.genepairs.rf[pooled.subtypes$concordant], pooled.subtypes$Verhaak[pooled.subtypes$concordant]))
  }
  colnames(contingency.m)[1:2] <- c("Consensus_Gene_Pairs_RF", comparison.group)
  
  cramers.v <- vcd::assocstats(contingency.matrix)[["cramer"]]
  
  stat.text <- sprintf("n = %d  Percent Concordant = %.2f%%  Cramer's v = %.2f", sum(contingency.matrix), 100 * sum(diag(contingency.matrix)) / sum(contingency.matrix), cramers.v)
  
  p <- ggplot(contingency.m, aes_string("Consensus_Gene_Pairs_RF", comparison.group)) + 
    geom_tile(aes(fill = value), colour = "black") + 
    scale_fill_gradient(name="Frequency", low="white", high="#00802b") + 
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), legend.position = "none", axis.text.y = element_text(angle = 90)) +
    geom_text(label=as.character(contingency.matrix), colour="black") + xlab(paste0("Consensus Gene-Pairs RF \n",stat.text))
  
  #p <- p + annotation_custom(grob=textGrob(stat.text, just="left"), xmin=0, xmax=1, ymin=-6)
  
  gt <- ggplot_gtable(ggplot_build(p))
  gt$layout$clip[gt$layout$name == "panel"] <- "off"
    
  return(gt)
})

grid.arrange(contingency.plots[[1]], contingency.plots[[2]], contingency.plots[[3]], contingency.plots[[4]], ncol=2)
@
\caption{Contingency plots showing concordance of subtype classification between the Consensus Gene Pairs classifier and the classifiers of Helland, Verhaak, Konecny. The fourth (bottom-right) plot shows the concordance between the Consensus Classifier and the patients concordantly classified between the three classifiers. Classification was performed using leave-one-dataset-out validation. The classifier works by training a random forest classifier on a binary feature matrix that represents the pairwise greater-than or less-than relationships between genes in a given gene set. This classifier does not require rescaling of the gene expression set, and can therefore be used to classify gene expression profiles at a single-sample level. Since the feature size for this classifier increases quadratically with respect to the size of the original gene set, we used the smallest gene set of the original subtype classifiers (the gene set of Verhaak et al.), which contains 100 gene symbols. Like the Consensus Random Forest classifier, this classifier outputs the subtype classification, in addition to a real-valued margin score which can discriminate between patients that are of well-defined or intermediate subtypes. A higher margin score can be interpreted as greater certainty of classification.}
\end{figure}
\pagebreak

\section{Survival Analysis}
\begin{figure}[H]
<<survival_plots, fig.width=12, fig.height=12, out.width="0.9\\textwidth">>=

get_classifier_surv_curves <- function(classifier, data.subset)  
  {
    pooled.subtypes.current <- pooled.subtypes
    
    if (classifier == "Gene Pairs RF"){
      pooled.subtypes.current$group <- pooled.subtypes.current$Consensus.genepairs.rf
    } else if (classifier == "Gene Pairs RF \n Patients with higher margins") {
      pooled.subtypes.current$group <- pooled.subtypes.current$Consensus.genepairs.default.cutoff.rf
      pooled.subtypes.current <- pooled.subtypes.current[!is.na(pooled.subtypes.current$Consensus.genepairs.default.cutoff.rf),]
    }
    
    if(data.subset == "concordant") {
      pooled.subtypes.current <- pooled.subtypes.current[pooled.subtypes.current$concordant,]
    }
    
    pval <- summary(coxph(Surv(years_to_death, vital_status) ~ group + strata(data.source), pooled.subtypes.current))$sctest["pvalue"]
    hr.out <- survcomp::hazard.ratio(x=pooled.subtypes.current$group, surv.time=pooled.subtypes.current$years_to_death, surv.event=pooled.subtypes.current$vital_status, strat=pooled.subtypes.current$data.source)
    text <- ""
    text <- paste0(text, "n = ", nrow(pooled.subtypes.current), "\n")
    for(i in 1:length(hr.out$hazard.ratio)) {
      text <- paste0(text, sprintf("HR %s: %.3f (%.3f-%.3f)\n", gsub("_consensus", "", levels(pooled.subtypes.current$group)[i+1]), hr.out$hazard.ratio[i], hr.out$lower[i], hr.out$upper[i]))
    }
    text <- paste0(text, sprintf("Logrank p = %.1E", pval))
    cols <- 1:4
    title <- paste0("Combined Classifier: ", classifier)
    if(data.subset == "concordant") {
      title <- paste0(title, " (concordant cases)")
    }
    
    
#     km.coxph.plot(Surv(years_to_death, vital_status) ~ group, pooled.subtypes.current, x.label="Time (years)", y.label = "Overall Survival", main.title="", show.n.risk = FALSE, n.risk.step=2, leg.text = levels(pooled.subtypes.current$group), leg.pos="topright", leg.inset=0, leg.bty="n", n.risk.cex=0.85, cex=0.4, o.text="", .col=cols, cex.lab=1.5)
#     title(title, cex.main=1.5)
#     text(0,0.05, text, cex=0.85, pos=4)

ss <- survfit(Surv(years_to_death, vital_status) ~ group, data = pooled.subtypes.current) 
  grob <- grobTree(textGrob(text, x=0.02,  y=0.2, hjust=0,
  gp=gpar(col="black", fontsize=10, fontface="italic")))
  ggsurv(ss, plot.cens = FALSE, main = title, back.white = TRUE) + theme(legend.direction='vertical',legend.box='horizontal',legend.position = c(0.75, 0.80), legend.title=element_blank())  + xlab("Time (years)") + annotation_custom(grob)

}

## Other options: 
# classifier = "Gene Pairs RF", "Gene Pairs RF (default cutoff)")
# data.subsets = "all", "concordant" 

sc1 <- get_classifier_surv_curves("Gene Pairs RF", "all")

sc2 <- get_classifier_surv_curves("Gene Pairs RF", "concordant")

sc3 <- get_classifier_surv_curves("Gene Pairs RF \n Patients with higher margins", "all")

sc4 <- get_classifier_surv_curves("Gene Pairs RF \n Patients with higher margins", "concordant")

grid.arrange(sc1, sc2, sc3, sc4, ncol=2)

@



\caption{Survival curves for patients across our ovarian cancer data compendium. Classification was performed using leave-one-dataset-out validation. For the bottom two figures, classification with the consensus classifier was performed with the default cutoff, in which 75\% of patients with the lowest margin are not classified.}
\end{figure}


% Main Figures of the manuscript
%figure 4 - pairwise concordance, venn_diagram, scatterplot 
\begin{figure}[H]


<<Figure4-ConsensusClassifier, fig.keep ='last', fig.width=10, fig.height=14, out.width="0.7\\textwidth", cache=FALSE>>=

# Two-way Concordances
Pane_4A <- grid.arrange(contingency.plots[[1]], contingency.plots[[2]], contingency.plots[[3]], contingency.plots[[4]], ncol=2, top = "A.")

# Survival Curves
Pane_4B <- grid.arrange(sc3, sc4, ncol=2, top = "B.")


grid.arrange(
Pane_4A, Pane_4B, layout_matrix = matrix(c(1,2), nrow = 2, byrow = FALSE), widths = c(20), heights = c(30,20))

@
\caption{Combined Classifier. A. Contingency plots showing concordance of subtype classification between  ConsensusOV classifier and the classifiers of Helland, Verhaak, Konecny. The fourth (bottom-right) plot shows the concordance between the Consensus Classifier and the patients concordantly classified between the three classifiers. B. Survival curves for the pooled dataset provided by ConsensusOV. Classification was performed using leave-one-dataset-out validation. For the bottom two figures, classification with ConsensusOV was performed with the default cutoff, in which 75\% of patients with the lowest margin are not classified.}
\end{figure}


\pagebreak
\section{Margin Analysis}

The Consensus Classifier produces a real-valued margin for each classified patient; this margin value is the difference between the highest subtype score and the second-highest subtype score. This margin value is a measure of the level of `certainty' of each classification; that is, a higher margin indicates greater certainty. We sought to investigate the ability of the margin values to discriminate between patients of concordant or non-concordant classification across subtypes.

We segregated patients into two categories: concordant patients (n = \Sexpr{sum(pooled.subtypes$concordant)}) which were classified concordantly between the Helland, Verhaak, and Konecny classifiers; and non-concordant patients (n = \Sexpr{sum(!pooled.subtypes$concordant)}) which were not classified concordantly between all three subtype classifiers.

\subsection{Margin Boxplots}
\begin{figure}[H]
{\centering
<<boxplots, fig.width=8, fig.height=8, out.width="0.8\\textwidth">>=

margin.comparison.cases.to.include <- pooled.subtypes$data.source != "GSE9891" & pooled.subtypes$data.source != "TCGA"

helland.boxplot.pval <- wilcox.test(pooled.subtypes$Helland.margins[pooled.subtypes$data.source != "GSE9891" & pooled.subtypes$concordant==TRUE], pooled.subtypes$Helland.margins[pooled.subtypes$data.source != "GSE9891" & pooled.subtypes$concordant==FALSE])$p.value
verhaak.boxplot.pval <- wilcox.test(pooled.subtypes$Verhaak.margins[pooled.subtypes$data.source != "TCGA" & pooled.subtypes$concordant==TRUE], pooled.subtypes$Verhaak.margins[pooled.subtypes$data.source != "TCGA" & pooled.subtypes$concordant==FALSE])$p.value
konecny.boxplot.pval <- wilcox.test(pooled.subtypes$Konecny.margins[pooled.subtypes$concordant==TRUE], pooled.subtypes$Konecny.margins[pooled.subtypes$concordant==FALSE])$p.value
consensus.genepair.rf.boxplot.pval <- wilcox.test(pooled.subtypes$Consensus.genepairs.rf.margin[pooled.subtypes$concordant==TRUE], pooled.subtypes$Consensus.genepair.rf.margin[pooled.subtypes$concordant==FALSE])$p.value

helland.margin.boxplot <- ggplot(pooled.subtypes[margin.comparison.cases.to.include,], aes(x=concordant, y=Helland.margins)) + stat_boxplot(geom='errorbar') + geom_boxplot(color="black") + ggtitle("Helland") + xlab(sprintf("p = %.2E", helland.boxplot.pval)) + ylab("Margin Value") + scale_x_discrete(labels=c("Non-Concordant", "Concordant"))
verhaak.margin.boxplot <- ggplot(pooled.subtypes[margin.comparison.cases.to.include,], aes(x=concordant, y=Verhaak.margins)) + stat_boxplot(geom='errorbar') + geom_boxplot(color="black") + ggtitle("Verhaak") + xlab(sprintf("p = %.2E", verhaak.boxplot.pval)) + ylab("Margin Value") + scale_x_discrete(labels=c("Non-Concordant", "Concordant"))
konecny.margin.boxplot <- ggplot(pooled.subtypes[margin.comparison.cases.to.include,], aes(x=concordant, y=Konecny.margins)) + stat_boxplot(geom='errorbar') + geom_boxplot(color="black") + ggtitle("Konecny") + xlab(sprintf("p = %.2E", konecny.boxplot.pval)) + ylab("Margin Value") + scale_x_discrete(labels=c("Non-Concordant", "Concordant"))
consensus.genepairs.rf.margin.boxplot <- ggplot(pooled.subtypes[margin.comparison.cases.to.include,], aes(x=concordant, y=Consensus.genepairs.rf.margin)) + stat_boxplot(geom='errorbar') + geom_boxplot(color="black") + ggtitle("ConsensusOV") + xlab(sprintf("p = %.2E", consensus.genepair.rf.boxplot.pval)) + ylab("Margin Value") + scale_x_discrete(labels=c("Non-Concordant", "Concordant"))

grid.arrange(helland.margin.boxplot, verhaak.margin.boxplot, konecny.margin.boxplot, consensus.genepairs.rf.margin.boxplot, ncol=2, nrow=2)
@
}
\caption{Boxplots indicating the margin values assigned by each classifier to concordant and non-concordant cases. These plots exclude patients in the training sets on which the Helland, Verhaak, and Konecny classifiers are based. For the Consensus Classifier, classification was performed using leave-one-dataset-out validation. All statistical tests were performed using the Wilcoxon rank-sum test.}
\end{figure}

\subsection{Margin ROC Curves}
\begin{figure}[H]
{\centering
<<ROC curve, fig.width=8, fig.height=8>>=
roc.colors <- brewer.pal(5, "Set1")
roc_Helland <- ROCR::performance(ROCR::prediction(pooled.subtypes$Helland.margins[margin.comparison.cases.to.include], pooled.subtypes$concordant[margin.comparison.cases.to.include]), "tpr", "fpr")
# plot(roc_Helland.data, col=roc.colors[1], lwd=2, ylim=c(0,1), xlim=c(0,1))
roc_Helland.df <- 
  data.frame(x = roc_Helland@x.values %>% unlist,
             y = roc_Helland@y.values %>% unlist,
             cutoffs = roc_Helland@alpha.values %>% unlist)

roc_Verhaak <- ROCR::performance(ROCR::prediction(pooled.subtypes$Verhaak.margins[margin.comparison.cases.to.include], pooled.subtypes$concordant[margin.comparison.cases.to.include]), "tpr", "fpr")

roc_Verhaak.df <- 
  data.frame(x = roc_Verhaak@x.values %>% unlist,
             y = roc_Verhaak@y.values %>% unlist,
             cutoffs = roc_Verhaak@alpha.values %>% unlist)

roc_Konecny <- ROCR::performance(ROCR::prediction(pooled.subtypes$Konecny.margins[margin.comparison.cases.to.include], pooled.subtypes$concordant[margin.comparison.cases.to.include]), "tpr", "fpr")

roc_Konecny.df <- 
  data.frame(x = roc_Konecny@x.values %>% unlist,
             y = roc_Konecny@y.values %>% unlist,
             cutoffs = roc_Konecny@alpha.values %>% unlist)

roc_Combined <- ROCR::performance(ROCR::prediction(pooled.subtypes$Consensus.genepairs.rf.margin[margin.comparison.cases.to.include], pooled.subtypes$concordant[margin.comparison.cases.to.include]), "tpr", "fpr")

roc_Combined.df <- 
  data.frame(x = roc_Combined@x.values %>% unlist,
             y = roc_Combined@y.values %>% unlist,
             cutoffs = roc_Combined@alpha.values %>% unlist)


#plot(ROCR::performance(ROCR::prediction(pooled.subtypes$Consensus.rf.margin[margin.comparison.cases.to.include], pooled.subtypes$concordant[margin.comparison.cases.to.include]), "tpr", "fpr"), col=roc.colors[5], lwd=2, add=TRUE)



# get AUCs
aucs <- numeric(0)
aucs <- c(aucs, as.numeric(ROCR::performance(ROCR::prediction(pooled.subtypes$Helland.margins[pooled.subtypes$data.source != "GSE9891"], pooled.subtypes$concordant[pooled.subtypes$data.source != "GSE9891"]), "auc")@y.values))
aucs <- c(aucs, as.numeric(ROCR::performance(ROCR::prediction(pooled.subtypes$Verhaak.margins[pooled.subtypes$data.source != "TCGA"], pooled.subtypes$concordant[pooled.subtypes$data.source != "TCGA"]), "auc")@y.values))
aucs <- c(aucs, as.numeric(ROCR::performance(ROCR::prediction(pooled.subtypes$Konecny.margins, pooled.subtypes$concordant), "auc")@y.values))
aucs <- c(aucs, as.numeric(ROCR::performance(ROCR::prediction(pooled.subtypes$Consensus.genepairs.rf.margin, pooled.subtypes$concordant), "auc")@y.values))
#aucs <- c(aucs, as.numeric(ROCR::performance(ROCR::prediction(pooled.subtypes$Consensus.rf.margin, pooled.subtypes$concordant), "auc")@y.values))




# plot(roc_Verhaak, col=roc.colors[2], lwd=2, add=TRUE)
# plot(roc_Konecny, col=roc.colors[3], lwd=2, add=TRUE)
# plot(roc_Combined, col=roc.colors[4], lwd=2, add=TRUE)
# abline(a=0, b= 1,lty=3)
#legend("bottomright", paste0(c("Helland", "Verhaak", "Konecny", "ConsensusOV"), paste(", AUC:",sprintf("%.3f", aucs))), lwd=2, col=roc.colors, bty="n")
# title("ROC curves for predicting concordance")
## The above commented plot is made into ggplot below  
roc_curves <- 
ggplot(roc_Helland.df, aes(x =x, y = y)) +
    geom_line(aes(colour = paste("Helland, AUC: ", sprintf("%.3f", aucs[[1]])))) +
    geom_line(data = roc_Verhaak.df,
              aes(color=paste("Verhaak, AUC: ",sprintf("%.3f", aucs[[2]])))) +
    geom_line(data = roc_Konecny.df,
              aes(color=paste("Konecny, AUC: ",sprintf("%.3f", aucs[[3]])))) +
    geom_line(data = roc_Combined.df,
              aes(color=paste("ConsensusOV, AUC: ",sprintf("%.3f", aucs[[4]])))) +
    geom_abline (intercept = 0, slope = 1) +
    ggtitle("ROC curves for predicting concordance") +
    theme_bw(base_size=20) + xlab("False positive rate") + ylab("True positive rate") + ylim(0, 1) + theme(legend.position = c(0.75, 0.25)) +  labs(color="") + scale_colour_manual("", values=c("red", "gold", "orange", "orchid3")) 

roc_curves
@
}
\caption{ROC curve for assessing the ability of margin values to discriminate between concordant and non-concordant cases. This plot excludes patients in the training sets on which the Helland, Verhaak, and Konecny classifiers are based; classification from the Consensus Classifier was performed using leave-one-dataset-out validation. The Consensus Classifier was effective (AUC = \Sexpr{sprintf("%.3f", aucs[4])}) at discriminating between patients of well-defined or intermediate subtypes.}
\label{fig:roccurves}
\end{figure}


% Main Figures of the manuscript
%figure 5 - barplot, roc curve
\begin{figure}[H]


<<Figure5-MarginAnalysis, fig.keep ='last', fig.width=10, fig.height=14, out.width="0.8\\textwidth", cache=FALSE>>=
# Bar plots
Pane_5A <- 
  grid.arrange(helland.margin.boxplot, verhaak.margin.boxplot, konecny.margin.boxplot, consensus.genepairs.rf.margin.boxplot,  nrow=1, top = "A.")

# ROC curve
Pane_5B <- 
  grid.arrange(roc_curves, top = "B.")
  

grid.arrange(
Pane_5A, Pane_5B, layout_matrix = matrix(c(1,2), nrow = 2, byrow = TRUE), heights = c(20,50))

@
\caption{Margin Analysis. A. Boxplots indicating the margin values assigned by each classifier to concordant and non-concordant cases. These plots exclude patients in the training sets on which the Helland, Verhaak, and Konecny classifiers are based. For the ConsensusOV, classification was performed using leave-one-dataset-out validation. All statistical tests were performed using the Wilcoxon rank-sum test. B. ROC curve for assessing the ability of margin values to discriminate between concordant and non-concordant cases. This plot excludes patients in the training sets on which the Helland, Verhaak, and Konecny classifiers are based; classification from the ConsensusOV was performed using leave-one-dataset-out validation. ConsensusOV was effective (AUC = 0.779) at discriminating between patients of well-defined or intermediate subtypes.}
\end{figure}